#!/usr/bin/env ruby

require "goliath/runner"
require "fileutils"

require "blobsterix"

module ArgParser
  def parse(args)
    args[1..-1].each do|command|
      @param ||= command if command != "generate" && @type
      @type ||= command if command != "generate"
    end
  end
end

class Generator
  include ArgParser
  def initialize(args)
    parse(args)
  end

  def run
    puts "Doing #{@type} with #{@param} in #{Dir.pwd}"

    init(@param || "") if @type == "init"
    transformation(@param || "NewTrafo") if @type == "transformator"
    storage(@param || "Special") if @type == "storage"
  end

  def init(folder)
    puts "Init new Blobsterix Server"

    files_to_write = Dir.glob(File.join(BLOBSTERIX_GEM_DIR, "templates/app/**/*"))
    check_files = files_to_write.map { |file|file.gsub(File.join(BLOBSTERIX_GEM_DIR, "templates/app/"), "") }

    check_files.each_with_index do|file, index|
      unless Dir.exist?(File.dirname(Blobsterix.root.join(folder, file)))
        puts "Create folder: #{File.dirname(Blobsterix.root.join(folder, file))}"
        FileUtils.mkdir_p(File.dirname(Blobsterix.root.join(folder, file)))
      end
      if !File.directory?(files_to_write[index]) && !File.exist?(Blobsterix.root.join(folder, file))
        puts "Create file: #{Blobsterix.root.join(folder, file)}"
        FileUtils.cp(files_to_write[index], Blobsterix.root.join(folder, file))
      end
    end
  end

  def storage(name)
    storages_dir = Blobsterix.root.join("storages")
    if File.exist?(File.join(storages_dir, "#{name.downcase}_storage.rb"))
      puts "Storage #{name} at #{File.join(storages_dir, "#{name.downcase}_transformation.rb")} already exists. cancel"
      return
    end
    FileUtils.mkdir_p(storages_dir)
    new_transformator = File.read(File.join(BLOBSTERIX_GEM_DIR, "templates/storage_template.rb"))
    new_transformator = new_transformator.gsub("$ClassName", name.capitalize)
    new_transformator = new_transformator.gsub("$url_name", name.downcase)
    File.write(File.join(storages_dir, "#{name.downcase}_storage.rb"), new_transformator)
  end

  def transformation(name)
    trafo_dir = Blobsterix.root.join("transformators")
    if File.exist?(File.join(trafo_dir, "#{name.downcase}_transformation.rb"))
      puts "Transformator #{name} at #{File.join(trafo_dir, "#{name.downcase}_transformation.rb")} already exists. cancel"
      return
    end
    FileUtils.mkdir_p(trafo_dir)
    new_transformator = File.read(File.join(BLOBSTERIX_GEM_DIR, "templates/transformation_template.rb"))
    new_transformator = new_transformator.gsub("$ClassName", name.capitalize)
    new_transformator = new_transformator.gsub("$url_name", name.downcase)
    File.write(File.join(trafo_dir, "#{name.downcase}_transformation.rb"), new_transformator)
  end
end
class BlobsterixRunner
  include ArgParser
  include Blobsterix::ConfigLoader

  def initialize(args)
    parse(args)
  end

  def run_command
    require "pry"

    require_storages
    require_config
    require_transformators

    Kernel.eval(@type)
    exit
  rescue LoadError => e
    warn "=> Unable to load pry: #{e}"
  end

  def run_console
    require "pry"

    require_storages
    require_config
    require_transformators

    Pry.start
    exit
  rescue LoadError => e
    warn "=> Unable to load pry: #{e}"
  end

  def run_blobsterix
    require_storages
    require_config
    require_transformators

    runner = Goliath::Runner.new(ARGV, nil)
    runner.logger = Blobsterix.logger
    runner.port = Blobsterix.port if Blobsterix.respond_to?(:port)
    runner.address = Blobsterix.address if Blobsterix.respond_to?(:address)

    Goliath.env = Blobsterix.env if Blobsterix.respond_to?(:env)

    runner.api = Blobsterix::Service.new
    runner.app = Goliath::Rack::Builder.build(Blobsterix::Service, runner.api)

    puts "Now starting Blobsterix #{Blobsterix::VERSION}...."
    runner.run
  end
end

puts "Blobsterix #{Blobsterix::VERSION}"
if ARGV.length == 0
  puts "Usage: "
  puts "\tserver (goliath server options) \n\t\tStarts blobsterix. When a blobsterix config is present in the executing folder it \n\t\twill be used otherwise blobsterix will run with standard options."
  puts "\tconsole \n\t\tStarts blobsterix console and loads app config"
  puts "\tgenerate (generator) (param) Used to generate blobsterix server files"
  puts "\t\t init (foldername) - Creates a new blobsterix project. When a foldername is supplied it will be created in that folder."
  puts "\t\t transformator (TrafoName) - Creates a new blobsterix transformator with the given name or just new as name."
  puts "\t\t storage (StorageName) - Creates a new blobsterix storage with the given name or just new as name."
  exit
end
if ARGV[0] == "generate"
  Generator.new(ARGV).run
else
  at_exit do
    Blobsterix.run_at_exit
  end
  if ARGV[0] == "server"
    BlobsterixRunner.new(ARGV).run_blobsterix
  elsif ARGV[0] == "console"
    BlobsterixRunner.new(ARGV).run_console
  elsif ARGV[0] == "run"
    BlobsterixRunner.new(ARGV).run_command
  end
end
